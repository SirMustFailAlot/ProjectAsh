plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id 'java'
	id "org.jetbrains.kotlin.jvm" version "2.1.10"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url = uri("https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/") }
	maven { url = uri("https://maven.impactdev.net/repository/development/") }
	maven { url = uri("https://repo.kord.dev/snapshots") }
	maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots") }
	maven { url = uri("https://repo.maven.apache.org/maven2") } // Main repository for most dependencies
	maven { url = uri("https://jitpack.io") } // Required for Kord
	maven { url = uri("https://maven.pkg.jetbrains.space/public/p/kotlinx/maven") } // Required for multiplatform-bignum
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"project-ash" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

configurations {
	include {
		canBeResolved = true  // Make it resolvable
	}
	implementation.extendsFrom(include)
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "net.minecraft:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// Cobblemon
	modImplementation "com.cobblemon:fabric:${project.cobblemon_version}"

	// Use the 'include' configuration for dependencies we want to package
	include("com.github.kittinunf.fuel:fuel:2.3.1")
	include("com.github.kittinunf.fuel:fuel-gson:2.3.1")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from {
		configurations.include.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

	// Exclude META-INF signature files
	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

	// Exclude the specific gson.JsonParser class
	exclude 'com/google/gson/JsonParser.class'

	// Alternatively, exclude all gson classes if needed
	// exclude 'com/google/gson/**'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
		// Add repositories to publish to here.
	}
}